#count special char occurence
punctuation=".?,&!->^"
my_str=str(input("enter string:"))
def count(my_str):
    c=0
    for char1 in my_str:
        if char1 in punctuation:
            c=c+1
    print("Special char occured ",end=" ")
    print(c)
count(my_str)



#count char occurence
my_str=str(input("enter string:"))
x=len(my_str)
a="abcdefghijklmnopqrstuvwxyz"
char=str(input("Char to be found:"))
def count(char):
    my_str.casefold()
    c=0
    for i in range(x):
        if (char==my_str[i]):
            c=c+1
    print("char occured",end=" ")
    print(c)
count(char)



#max from 2 num using function
def max(a,b):
    if(a>b):
        return(a)
    else:
        return(b)
print("max value is: ")
print(max(22,37))




#square of num using lambda
a=lambda x:x**2
print(a(12))



#class
class a:
    def a1():
        print("Inside Class's Function")
a.a1() #function call without obj


#class&obj
class A:
    x=2
    def disp(self):
        print(self.x)
a1=A() #instance 
a1.disp() #call funct through instance


#class constructor and member function
class add:
    def __init__(self,a,b):
        self.x=a
        self.y=b
    def disp(self):
        print(self.x+self.y)

a=add(23,4)
a.disp()



#class emp with data members id,name,salary!enter detail and display.
class emp:
    def detail(self):
        self.id=int(input("enterd id: "))
        self.name=str(input("enter name: "))
        self.salary=float(input("enter salary: "))
    def display(self):
        print("Id: ",end=" ")
        print(self.id)
        print("name: ",end=" ")
        print(self.name)
        print("salary: ",end=" ")
        print(self.salary)
o1=emp()
o2=emp()
o1.detail()
o1.display()
o2.detail()
o2.display()
        

#student info,subject marks avg calculate
class student:
    def info(self):
        self.roll=int(input("enter Roll:"))
        self.name=str(input("enter Name:"))
        self.year=int(input("enter Year:"))
    def info1(self):
        self.sub1=str(input("Sub name:"))
        self.marks1=float(input("Marks:"))
        self.sub2=str(input("Sub name:"))
        self.marks2=float(input("Marks:"))
        self.sub3=str(input("Sub name:"))
        self.marks3=float(input("Marks:"))
    def calculate(self):
        self.avg=(self.marks1+self.marks2+self.marks3)/3
    def display(self):
        print()
        print("Roll:",end=" ")
        print(self.roll)
        print("Name:",end=" ")
        print(self.name)
        print("Year:",end=" ")
        print(self.year)
        print("Average Marks:",end=" ")
        print(self.avg)
o=student()
o.info()
o.info1()
o.calculate()
o.display()
    
    
    
    
 #single inheritance   
    class add:
    def enter(self):   #base class
        self.a=float(input("enter number a:"))
        self.b=float(input("enter number b:"))
class disp(add):      #derived class
    def show(self):
        self.c=self.a+self.b
        print("Sum is:",self.c)
o=disp()
o.enter()
o.show()



#hybrid inheritance
#multilevel and multiple
class std: 
    def info1(self):
        self.roll=str(input("Enter Roll no.:"))
        self.name=str(input("Enter Name:"))
class marks(std):
    def info2(self):
        self.m1=float(input("Enter sub1 marks:"))
        self.m2=float(input("Enter sub2 marks:"))
class sports:
    def info3(self):
        self.m3=float(input("Enter sports marks:"))
class result(marks,sports):
    def disp(self):
        print("Roll np.:",self.roll)
        print("Name:",self.name)
        self.avg=(self.m1+self.m2+self.m3)/3
        print("Average Marks:",self.avg)
o=result()
o.info1()
o.info2()
o.info3()
o.disp()
